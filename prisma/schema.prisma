generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  email      String      @unique
  hash       String
  name       String

  candidates Candidate[] @relation("UserCandidates")

  @@map("users")
}

model Candidate {
  id        Int      @id @default(autoincrement())
  firstName String   // first name is compulsory
  lastName  String   // last name is compulsory
  email     String   @unique  // email is compulsory
  mobile_number    String   // number is compulsory
  createdAt DateTime @default(now())
  
  dateOfBirth DateTime? // Optional
  
  userId    Int?     @map("user_id")
  user      User?    @relation("UserCandidates", fields: [userId], references: [id])
  
  educations        Education[]        @relation("CandidateEducations")
  previousEmployers PreviousEmployer[] @relation("CandidateEmployers")
  isVerified Boolean @default(false)
  
  @@map("candidates")
}


model Education {
  id             Int      @id @default(autoincrement())
  institution    String
  qualification  String
  contactPerson  String
  contactEmail   String
  contactPhone   String
  
  candidateId    Int      @map("candidate_id")
  candidate      Candidate @relation("CandidateEducations", fields: [candidateId], references: [id])
  isVerified     Boolean @default(false)
  
  @@map("educations")
}

model PreviousEmployer {
  id             Int      @id @default(autoincrement())
  companyName    String
  position       String
  contactPerson  String
  contactEmail   String
  contactPhone   String
  isVerified Boolean @default(false)

  candidateId    Int      @map("candidate_id")
  candidate      Candidate @relation("CandidateEmployers", fields: [candidateId], references: [id])
  
  @@map("previous_employers")
}

